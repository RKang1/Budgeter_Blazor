@inject HttpClient Http
@inject NavigationManager NavigationManager

@page "/"
@page "/{parentId:int}"
@page "/{parentId:int}/{type}"

@*For Testing*@
@page "/{type}"

<h2>Transactions Page</h2>

<table class="table">
    <thead>
        <tr>
            <td>Date</td>
            <td>Description</td>
            <td>Amount</td>
            <td>Creation Date</td>
            <td>Revision Date</td>
        </tr>
    </thead>

    <tbody>
        @foreach (TransactionDTO transaction in transactions)
        {
            <tr>
                <td>
                    @transaction.PurchaseDate.ToShortDateString()
                </td>

                <td>
                    @transaction.Description
                </td>

                <td>
                    @transaction.Amount
                </td>

                <td>
                    @transaction.CreatedDate
                </td>

                <td>
                    @transaction.RevisionDate
                </td>

                @if (type == TransactionTypes.Income.ToString())
                {
                    <td>
                        <button class="btn btn-primary" @onclick="(() => GotoExpensesOverview(transaction.Id))">Expenses</button>
                    </td>
                }

                <td>
                    <button class="btn btn-primary" @onclick="(() => GoToEditTransaction(transaction.Id))">Edit</button>
                </td>

                <td>
                    <button class="btn btn-primary" @onclick="(() => DeleteTransaction(transaction.Id))">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="GoToAddTransaction">Add</button>

@code {
    [Parameter]
    public string type { get; set; }

    [Parameter]
    public int parentId { get; set; }

    IEnumerable<TransactionDTO> transactions = Enumerable.Empty<TransactionDTO>();

    protected override async Task OnParametersSetAsync()
    {
        if (String.IsNullOrEmpty(type))
        {
            type = TransactionTypes.Income.ToString();
        }

        await GetTransactions();
    }

    private async Task GetTransactions()
    {
        transactions = await Http.GetFromJsonAsync<IEnumerable<TransactionDTO>>(ControllerRouting.Transaction + $"/ByParent/?parentId={parentId}&type={type}");
    }

    private void GoToAddTransaction(MouseEventArgs e)
    {
        NavigationManager.NavigateTo($"AddTransaction/{type}/{parentId}");
    }

    private void GoToEditTransaction(int id)
    {
        NavigationManager.NavigateTo($"EditTransaction/{id}");
    }

    private async Task DeleteTransaction(int id)
    {
        await Http.DeleteAsync(ControllerRouting.Transaction + $"/?id={id}");
        await GetTransactions();
    }

    private void GotoExpensesOverview(int id)
    {
        NavigationManager.NavigateTo($"ExpensesOverview/{id}");
    }
}
