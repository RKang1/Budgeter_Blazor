@inject HttpClient Http

@page "/ExpensesOverview/{incomeId:int}"

<h2>Expenses Overview Page</h2>

<h2>@*Income: @expenseDetails.Income*@</h2>

<table class="table">
    <thead>
        <tr>
            <td>Savings</td>
            <td>Needs</td>
            <td>Wants</td>
            <td>Available</td>
        </tr>
    </thead>

    @* Just a single row table for now to make linking easier.
        Ideally it would use somthing like a pie chart*@

    @* TODO link each item to the appropriate expense page *@
    <tbody>
        <tr>
            <td>
                <NavLink class="nav-link" href=@($"{incomeId}/savings")>
                    <span class="oi" aria-hidden="true"></span>
                    @savings.Sum(t => t.Amount)
                </NavLink>
            </td>

            <td>
                <NavLink class="nav-link" href=@($"{incomeId}/needs")>
                    <span class="oi" aria-hidden="true"></span>
                    @needs.Sum(t => t.Amount)
                </NavLink>
            </td>

            <td>
                <NavLink class="nav-link" href=@($"{incomeId}/wants")>
                    <span class="oi" aria-hidden="true"></span>
                    @wants.Sum(t => t.Amount)
                </NavLink>
            </td>

            <td>
                @*TODO Add the available balance calculation*@
                @*@(income - (expensesOverview.Savings + expensesOverview.TotalNeedsAmount + expensesOverview.Wants))*@
            </td>
        </tr>
    </tbody>
</table>

@code {
    [Parameter]
    public int incomeId { get; set; }

    TransactionDTO income = new TransactionDTO();
    IEnumerable<TransactionDTO> savings = Enumerable.Empty<TransactionDTO>();
    IEnumerable<TransactionDTO> needs = Enumerable.Empty<TransactionDTO>();
    IEnumerable<TransactionDTO> wants = Enumerable.Empty<TransactionDTO>();

    protected override async Task OnParametersSetAsync()
    {
        await GetIncome();
        await GetSavings();
        await GetNeeds();
        await GetWants();
    }

    private async Task GetIncome()
    {
        income = await Http.GetFromJsonAsync<TransactionDTO>(ControllerRouting.Transaction + "/ById/?id=" + incomeId);
    }
    private async Task GetSavings()
    {
        savings = await Http.GetFromJsonAsync<IEnumerable<TransactionDTO>>(ControllerRouting.Transaction + "/?type=" + TransactionTypes.Savings.ToString());
    }

    private async Task GetNeeds()
    {
        needs = await Http.GetFromJsonAsync<IEnumerable<TransactionDTO>>(ControllerRouting.Transaction + "/?type=" + TransactionTypes.Needs.ToString());
    }

    private async Task GetWants()
    {
        wants = await Http.GetFromJsonAsync<IEnumerable<TransactionDTO>>(ControllerRouting.Transaction + "/?type=" + TransactionTypes.Wants.ToString());
    }
}
