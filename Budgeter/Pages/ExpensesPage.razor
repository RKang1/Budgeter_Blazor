@inject HttpClient Http
@inject NavigationManager NavigationManager

@page "/Income/ExpensesOverview/Expenses"

<h2>Expenses Page</h2>

<table class="table">
    <thead>
        <tr>
            <td>Date</td>
            <td>Description</td>
            <td>Amount</td>
            <td>Creation Date</td>
            <td>Revision Date</td>
        </tr>
    </thead>

    <tbody>
        @foreach (TransactionDTO expense in expenses)
        {
            <tr>
                <td>
                    @expense.PurchaseDate.ToShortDateString()
                </td>

                <td>
                    @expense.Description
                </td>

                <td>
                    @expense.Amount
                </td>

                <td>
                    @expense.CreatedDate
                </td>

                <td>
                    @expense.RevisionDate
                </td>

                <td>
                    <button class="btn btn-primary" @onclick="(() => EditExpense(expense.Id))">Edit</button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => DeleteExpense(expense.Id))">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="AddExpense">Add</button>



@code {
    IEnumerable<TransactionDTO> expenses = Enumerable.Empty<TransactionDTO>();

    protected override async Task OnInitializedAsync()
    {
        expenses = await Http.GetFromJsonAsync<IEnumerable<TransactionDTO>>(ControllerRouting.Transaction);
    }

    private void AddExpense(MouseEventArgs e)
    {
        NavigationManager.NavigateTo("AddTransaction");
    }

    private void EditExpense(int id)
    {
        NavigationManager.NavigateTo($"EditTransaction/{id}");
    }

    private async Task DeleteExpense(int id)
    {
        await Http.DeleteAsync(ControllerRouting.Transaction + "/" + id);
    }

}
